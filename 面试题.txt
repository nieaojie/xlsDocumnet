awk：
https://blog.csdn.net/weixin_55609951/article/details/117278143

1.如何获取一个文件每一行的第三个元素
#awk '{print $3}' 文件名
备注：awk支持按列输出，通过内置变量$1,$2,$3……可以单独显示任意列，默认列是以空格或Tab锁紧为分隔符，也可以使用-F选项指定其他分隔符。

2.shell函数能解决什么实际问题?
答：定义函数的格式：
function 函数名{
     代码块
}
函数名(){
     代码块
}
使用函数可以避免代码重复
使用函数可以将大的工程分割为若干小的功能模块，代码的可读性更强

3.使用awk统计httpd访问日志中每个客户端IP的出现次数
#awk '{ip[$1]++}END{for(i in ip) {print ip[i],i}}' /var/log/httpd/access_log | sort -r
备注:定义数组，数组名称为ip，数字的下标为日志文件的第1列(也就是客户端的IP地址)，++的目的在于对客户端进行统计计数，客户端.
IP出现一次计数器就加1。END中的指令在读取完文件后执行，通过循环将所有统计信息输出，for 循环遍历的是数组名ip的下标

4.哪些方式可以将标准输出和错误输出重定向到文件?
#命令 &> 文件名
#命令 > 文件名1 2> 文件名2
#命令 > 文件名 2>&1
#命令 &>> 文件名
#命令 >> 文件名1 2>> 文件名2
#命令 >> 文件名 2>&1

5.下列正则表达式符号分别代表什么含义?
[]表示集合，匹配集合中的任意单个字符
\{n\}表示精确匹配前面的字符出现了n次

6.shell中对变量字串进行截取的方式有哪些?
#echo ${变量名：开始位置：长度}          #起始位置从0开始
#expr substr $变量名 开始位置 长度       #起始位置从1开始
#echo $变量名 | cut -b 开始位置-结束位置 #起始位置从1开始

7.使用sed命令如何将文件中的所有的大写字母Q转换为小写字母q？
答案：
#sed -i 's/Q/q/g' 文件名

8.执行如下命令会对test.txt文件产生什么样的影响?
#sed -i 's9\945\9\99\939g' test.txt
答案:将test.txt文件中的94599替换为9893

9.工作中写过什么脚本?
答案：
监控脚本(监控系统、监控服务、监控硬件信息、监控性能、安全监控等)
系统初始化脚本(创建目录、创建账户、安装软件包、设置权限、修改内核参数）
一键部署（源码安装脚本）
备份脚本（自动备份数据库、网站备份、备份日志、备份配置文件)
日志分析脚本（分析日志数据、汇总并统计相关信息、如PV/UA等)

10.编写脚本,自动生成一个8位随机密码？








网络原理等：https://blog.csdn.net/wgw_dream/article/details/84309351
https://zhuanlan.zhihu.com/p/50077163
https://zhuanlan.zhihu.com/p/566222944
https://zhuanlan.zhihu.com/p/449264176
https://blog.csdn.net/weixin_44721146/article/details/120977728?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1-120977728-blog-94238847.235^v38^pc_relevant_default_base&spm=1001.2101.3001.4242.2&utm_relevant_index=2
如何介绍自己做过的运维项目呢：
https://blog.51cto.com/wuyouyao/1693512?articleABtest=1


运维必会：
https://blog.51cto.com/u_11638832/1793990?articleABtest=0
运维的一系列项目：https://my.oschina.net/u/4255039/blog/3590633
面试题分组：https://gitee.com/stevezhou7020/ruanda_Linux2019/tree/master/%E7%AC%AC3%E6%AC%A1-Linux%E7%BB%BC%E5%90%88%E9%9D%A2%E8%AF%95%E9%A2%98/%E6%9C%B1%E6%9D%B0%E7%BB%84
一些自动部署服务的脚本：https://gitee.com/aqztcom/kjyw/tree/master/mysql
电商项目实例：https://zhuanlan.zhihu.com/p/109178751


自动化运维项目：https://www.cnblogs.com/yangliheng/p/6294067.html
Linux企业架构实战系列：https://www.cnblogs.com/along21/p/8005775.html


范例： 你好，我是张凯，毕业于 XX 大学，在校期间曾从担任计算机协会会长和担任学校机房管理员，在校期间经常组织计算机方面活动，虽然没有 linux 运维工作经验，社会实践经验也是挺丰富的，家里不富裕，暑假 寒假 基本都是在广东打工，
我了解到这个岗位的工作内容主要包含日常服务器巡检、维护服务器正常运行 等，我认为要把这些工作做好，需要很好 linux 基础方面的能力，在我以前的学习过往中，对这届方面都有一定的积累，并且这也是我未来计划发展的方向，希望有机会可以加入公司工作
https://jacktian.blog.csdn.net/article/details/99962423?spm=1001.2101.3001.6650.15&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-15-99962423-blog-129046287.235%5Ev38%5Epc_relevant_default_base&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-15-99962423-blog-129046287.235%5Ev38%5Epc_relevant_default_base&utm_relevant_index=19





一些运维脚本：https://gitee.com/C4488/HQC?_from=gitee_search

运维脚本项目：https://gitee.com/wuchen001/Tengine_Install?_from=gitee_search

















一、生成某个文件的MD5值

md5sum命令可以同时对一批文件进行256位的MD5编码，并可以通过比较前后二次编码值来检测一个文件是否给修改过。由于此命令执行效率较高，所以常可用于大批文件的编译过程中，
比如执行第一次编译时，产生每个文件的MD5编码，当第二次或以后编译时，通过MD5编码来确定一个文件是否有修改，而只对有变化的文件进行编译，这样可以大大节省编译的时间。

二、生成多个文件的多个Md5值
命令：这里把要生成的文件都放在同一个目录下，这个命令结合了find命令和xargs命令来生成多个文件的MD5值

find 目录 -type f -print0 | xargs -0 md5sum >> 2_md5.txt



1.将某个文件夹下所有的文件算出md5sum值 生成校验文件 （/home）

find /home -type f -print0 | xargs -0 md5sum | sort >md5.txt

2.  # 进行md5sum 校验检查文件完整性  

md5sum -c md5.txt

find ~/ -type f | xargs md5sum >>/opt/md5sum.log 会生成每一个文件的md5值和对应的文件位置的文件
md5sum -c /opt/md5sum.log 会根据文件中相应的位置文件重新生成md5值与该文件的MD5相比较输出结果


xargs加上与不加的区别：
https://blog.csdn.net/feiying0canglang/article/details/127965271
find /etc -size 1024c | grep txt	grep找的是find结果（文件列表）
find /etc -size 1024c | xargs grep txt	加上xargs后，grep找的是find结果中文件内容
eg:xargs -n3的用法
cat test.txt | xargs
结果

a b c d e f g h i j k l m n o p q
指定列数输出

cat test.txt | xargs -n3
结果

a b c
d e f
g h i
j k l
m n o
p q


mkpasswd实例:
系统随机生成一个密码
[root@linux-01 ~]# mkpasswd
pBe93u.tE //随机生成一个九位数密码

指定生成密码的长度：
[root@linux-01 ~]# mkpasswd -l 12
u6eGVa6awlu;

指定生成密码有几个特殊符号：
[root@linux-01 ~]# mkpasswd -l 12 -s 4
mL{njwH<[66-



可以看出 ifconfig命令是查看配置网卡信息，ip命令是查看配置路由信息. 两者都显示了ip地址。


shell面试题链接：https://blog.csdn.net/qq_37126850/article/details/106507550
use%问题详细解答：https://www.cnblogs.com/kebibuluan/p/9362355.html
[root@localhost ~]# df -h

Filesystem                    Size  Used Avail Use% Mounted on

/dev/mapper/VolGroup-lv_root   19G  2.0G   16G  12% /

tmpfs                         250M     0  250M   0% /dev/shm

/dev/sda1                     485M   31M  429M   7% /boot




curl参数用法：http://www.codebelief.com/article/2017/05/linux-command-line-curl-usage/








https://wenku.baidu.com/view/c75a6ac71fd9ad51f01dc281e53a580217fc505c.html?fr=search-rec-8&_wkts_=1686559285900&wkQuery=linux%E8%BF%90%E7%BB%B4%E5%AE%9E%E4%B9%A0%E7%AE%80%E5%8E%86%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C

https://wenku.baidu.com/view/d24eb12b5bfb770bf78a6529647d27284b73375e.html?fr=search-rec-5&_wkts_=1686559477046&wkQuery=linux%E8%BF%90%E7%BB%B4%E6%97%A0%E7%BB%8F%E9%AA%8C%E7%AE%80%E5%8E%86%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C
项目经验

https://www.jianliben.com/article/detail/6124
https://www.jianliben.com/article/detail/6124




111111111111111面试题：https://www.cnblogs.com/betterquan/articles/11605775.html

rsync相关：https://www.cnblogs.com/rsyn/p/12182411.html

27、rsync+inotify是实现文件实时同步的，加什么参数才能实现实时同步，--delete参数又是什么意思？
笔者回答：rsync是远程同步工具、inotify是一种强大的异步文件系统系统监控机制。通过inotifywait 中的-m参数可以实现“始终保持事件监听状态”。rsync中的-delete参数是指“ 删除那些DST中SRC没有的文件”。
rsync -avz --delete rsync://user1@192.168.126.102/web /filedst
拓展：--delete：删除本地比服务器多出来的文件（源地址没有，目标地址有的删掉） --delete: 　　删除目标文件夹内多余的文档



mysql主从复制原理：

该过程的第一部分就是master记录二进制日志。在每个事务更新数据完成之前，master在二进制日志记录这些改变。
MySQL将事务串行的写入二进制日志，即使事务中的语句都是交叉执行的。在事件写入二进制日志完成后，master通
知存储引擎提交事务。
下一步就是slave将master的binary log拷贝到它自己的中继日志。首先，slave开始一个工作线程——I/O线程。I/O线程
在master上打开一个普通的连接，然后开始binlog dump process。Binlog dump process从master的二进制日志中读取
事件，如果已经跟上master，它会睡眠并等待master产生新的事件。I/O线程将这些事件写入中继日志。
SQL slave thread（SQL从线程）处理该过程的最后一步。SQL线程从中继日志读取事件，并重放其中的事件而更新
slave的数据，使其与master中的数据一致。只要该线程与I/O线程保持一致，中继日志通常会位于OS的缓存中，所以中
继日志的开销很小。



文本处理命令，sort , tr , cut, paste, uniq, tee等
linux启动过程：http://www.taodudu.cc/news/show-350049.html?action=onClick
lvs：https://blog.csdn.net/weixin_38738049/article/details/125749863
vim快捷键：https://blog.csdn.net/weixin_57397512/article/details/127421358?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1-127421358-blog-129915440.235^v38^pc_relevant_default_base&spm=1001.2101.3001.4242.2&utm_relevant_index=2
vim删除列操作快捷键：https://blog.csdn.net/qq_35760825/article/details/127357063
linux免密登录原理：https://blog.csdn.net/mountain9527/article/details/124621581?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1-124621581-blog-123707195.235^v38^pc_relevant_default_base&spm=1001.2101.3001.4242.2&utm_relevant_index=2
grep和egrep：https://blog.csdn.net/fruitless/article/details/129410984?spm=1001.2101.3001.6650.8&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-8-129410984-blog-109023498.235%5Ev38%5Epc_relevant_default_base&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-8-129410984-blog-109023498.235%5Ev38%5Epc_relevant_default_base&utm_relevant_index=12
面试题全：https://blog.csdn.net/weixin_43215948/article/details/107347531?spm=1001.2101.3001.6650.4&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-4-107347531-blog-91775116.235%5Ev38%5Epc_relevant_default_base&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-4-107347531-blog-91775116.235%5Ev38%5Epc_relevant_default_base&utm_relevant_index=7
怎么判断一个应用是否起来：https://blog.csdn.net/qq_44212783/article/details/126009178
什么是路由：路由是一种网络设备，可以将不同网络间的数据进行转发和传递
vlan与子网的对应关系：
（1）一个VLAN能够对应多个子网，只是路由太麻烦，主要用于远程用户连接。
（2）一个子网最好只对应一个VLAN。
（3）Cisco认为一个子网只能属于一个VLAN，但是一个VLAN可以包含多个子网。
（4）不过Cisco建议VLAN和子网一一对应。
子网：为了维护安全,当一个较大的网络被划分为较小的网络时,这就是所谓的子网
VLAN:即虚拟局域网，是将一个物理的LAN在逻辑上划分成多个广播域的通信技术。VLAN内的主机间可以直接通信，而VLAN间不能直接通信，从而将广播报文限制在一个VLAN内。

子网和VLAN的区别:

1.VLAN是一种基于逻辑上的虚拟局域网，而LAN子网划分是基于物理的,用子网掩码就可以划分LAN，同一vlan下主机通信必须是同一网段，不同vlan通信要做vlan间路由;实际上可以将几个子网划为一个VLAN;
2.只通过子网划分(子网掩码就)的网络，不同网段并没有真正意义上实现隔绝广播，广播数据包还是会发送到其他的网段，只是会直接拒绝。而使用了vlan以后广播数据包只会在该vlan中传播，不会发送到其他vlan中，真正意义的隔绝广播。

网络不通的排查情况：https://blog.csdn.net/hjxloveqsx/article/details/120821045?spm=1001.2101.3001.6650.6&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-6-120821045-blog-109809114.235%5Ev38%5Epc_relevant_default_base&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-6-120821045-blog-109809114.235%5Ev38%5Epc_relevant_default_base&utm_relevant_index=11
服务无法访问的几种情况：https://www.cnblogs.com/stone94/p/13977778.html
反向代理与负载均衡：https://www.cnblogs.com/cuihongyu3503319/p/5835455.html
                    https://www.cnblogs.com/xiaxiangming/p/17281675.html
正向代理和反向代理：https://www.cnblogs.com/christopherchan/p/12831501.html
答：负载均衡是做反向代理的目的之一。
缓存，反向代理主要是缓存东西，以便减少并发操作。
做了反向代理才能实现负载均衡。负载均衡是做反向代理的目的之一。
如果没有反向代理，压力直接放到一个单一的http server上。而有了反向代理，典型情况下，一个ngnix做反向代理，后面有若干个http Server。所有的流量想到ngnix，这个东西根据配置的策略，或者轮转，或者随机或者压力分流，把流量导向给后面的Http server。从而达到负载均衡。
反向代理就是后端服务不直接对外暴露，请求首先发送到nginx，然后nginx将请求转发到后端服务器，比如tomcat等。如果后端服务只有一台服务器，nginx在这里只有一个作用就是起到了代理后端服务接收请求的作用，称之为反向代理。
可是在现实的应用场景中，一台后端服务器出现单点故障的概率很大或者单台机器的吞吐量有限，无法承担过多请求。这时候就需要在nginx后端配置多台服务器，利用nginx内置的规则讲请求转发到后端不同的机器上。这时候就起到了负载均衡的作用。
CDN:CDN，全称内容分发网络（ContentDeliveryNetwork），可以简单地将其理解成一个离你很近的、可以从上面获取到完整的原始数据的服务器，它会定期和拥有原始内容的服务器进行同步，保证用户可以从上面获取到最新的内容。

CDN服务器优势:
1、访问加速优势
2、防御网络攻击
3、降低源服务器带宽

kill和kill -9:执行kill命令，系统会发送一个SIGTERM信号给对应的程序。SIGTERM多半是会被阻塞的。
kill -9命令，系统给对应程序发送的信号是SIGKILL，即exit。exit信号不会被系统阻塞，所以kill -9能顺利杀掉进程

什么是负载均衡:
 LB（Load Balance，负载均衡）是一种集群技术，它将特定的业务（网络服务、网络流量等）分担给多台网络设备（包括服务器、防火墙等）或多条链路，从而提高了业务处理能力，保证了业务的高可靠性。
 
127.0.0.1和localhost和本机IP三者的区别！！！
（1）127.0.0.1:
环回地址是主机用于向自身发送通信的一个特殊地址（也就是一个特殊的目的地址）。IPv4的环回地址为：127.0.0.0到127.255.255.255都是环回地址（只是有两个特殊的保留），此地址中的任何地址都不会出现在网络中
网络号为127的地址根本就不是一个网络地址（因为产生的IP数据报就不会到达外部网络接口中，是不离开主机的包）
所以说：127.0.0.1是保留地址之一，只是被经常的使用，来检验本机TCP/IP协议栈而已
如果我们可以ping通的话，就说明：本机的网卡和IP协议安装都没有问题。（跟我们当前主机有没有联网没有一点关系）
（2）localhost:
首先是一个域名（如同：www.baidu.com），也是本机地址，它可以被配置为任意的IP地址（也就是说，可以通过hosts这个文件进行更改的），不过通常情况下都指向：（如下）
IPv4：表示   127.0.0.1
IPv6：表示   [::1]
（3）本机IP:
我们可以理解为本机有三块网卡，一块网卡叫做loopback（虚拟网卡），一块叫做ethernet（有线网卡），一块叫做wlan（你的无线网卡），
联网，网卡传输，受防火墙和网卡限制
用于本机和外部访问

Mysql的性能监控指标有哪些？https://www.zhihu.com/question/590444619/answer/2975903686

加强操作系统安全性的方法有以下这些：
更换默认密码
不要重复使用密码
在员工离职时，立即禁用其帐户
审查安全日志
定时进行网络扫描
监控网络外部流量
定期安装补丁和更新软件

密钥登录的过程：
SSH 密钥登录分为以下的步骤。
预备步骤，客户端通过ssh-keygen生成自己的公钥和私钥。
第一步，手动将客户端的公钥放入远程服务器的指定位置。
第二步，客户端向服务器发起 SSH 登录的请求。
第三步，服务器收到用户 SSH 登录的请求，发送一些随机数据给用户，要求用户证明自己的身份。
第四步，客户端收到服务器发来的数据，使用私钥对数据进行签名，然后再发还给服务器。
第五步，服务器收到客户端发来的加密签名后，使用对应的公钥解密，然后跟原始数据比较。如果一致，就允许用户登录。



222222面试题第二章：https://blog.csdn.net/qq_40907977/article/details/85703181?spm=1001.2101.3001.6650.8&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-8-85703181-blog-107347531.235%5Ev38%5Epc_relevant_default_base&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-8-85703181-blog-107347531.235%5Ev38%5Epc_relevant_default_base&utm_relevant_index=15
讲述一下Tomcat8005、8009、8080三个端口的含义？
8005==》 关闭时使用
8009==》 为AJP端口，即容器使用，如Apache能通过AJP协议访问Tomcat的8009端口
8080==》 一般应用使用

MySQL主从延迟是指从库的数据同步比主库略有延迟，造成数据差异。MySQL主从复制模式一般采用以下方法降低延迟：
1、优化网络环境：主从复制时，减小主从服务器之间网络延迟对数据库同步的影响。可以考虑优化网络之间连接的带宽、增加从库的硬件性能等。
2、增加从库数量：增加从库数量可以增加数据同步的速度和可靠性，同时也能减少每个从库的负担，提高从库响应速度。
3、调整数据库相关参数：可以调整一些MySQL数据库中的相关参数，比如调整binlog格式、binlog缓冲区大小、innodb_flush_log_at_trx_commit等参数，采用半同步模式，以加快数据的同步速度。
4、分区数据库：将数据库分成多个区，每个从库只复制自己所需要的数据区，可以有效的减少排队堵塞、网络传输等方面的延迟问题。
综上所述，优化网络环境、增加从库数量、调整数据库相关参数、分区数据库等方法可以有效的降低MySQL主从复制模式的延迟。

MySQL主从库配置和主库宕机解决方案：https://blog.csdn.net/zfl589778/article/details/51441719?spm=1001.2101.3001.6650.11&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-11-51441719-blog-119251940.235%5Ev38%5Epc_relevant_default_base&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-11-51441719-blog-119251940.235%5Ev38%5Epc_relevant_default_base&utm_relevant_index=12

333333333333面试题：https://blog.csdn.net/qq_43406276/article/details/103684279
vlan通信：https://blog.csdn.net/phunxm/article/details/9498829
mysql备份与恢复：https://blog.csdn.net/qq_41372916/article/details/129036414
使用binlog恢复数据：https://huaweicloud.csdn.net/63355dc5d3efff3090b544d1.html?spm=1001.2101.3001.6650.16&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Eactivity-16-124435655-blog-78547005.235%5Ev38%5Epc_relevant_default_base&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Eactivity-16-124435655-blog-78547005.235%5Ev38%5Epc_relevant_default_base&utm_relevant_index=17
 https://blog.csdn.net/DreamEhome/article/details/130010601?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EYuanLiJiHua%7EPosition-2-130010601-blog-124383495.235%5Ev38%5Epc_relevant_default_base&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EYuanLiJiHua%7EPosition-2-130010601-blog-124383495.235%5Ev38%5Epc_relevant_default_base&utm_relevant_index=3
 
面试项目：https://mp.weixin.qq.com/s?__biz=MzAwMjg1NjY3Nw==&mid=2247487355&idx=1&sn=7758970ef01f26071fee961d7c65320a&source=41#wechat_redirect
最全面试题：https://blog.csdn.net/qq_39418469/article/details/117459176?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1-117459176-blog-85703181.235^v38^pc_relevant_default_base&spm=1001.2101.3001.4242.2&utm_relevant_index=4

在 linux 要查找某个文件，但不知道放在哪里了，可以使用下面的一些命令来搜索：
 which 查看可执行文件的位置。
 whereis 查看文件的位置。
 locate 配合数据库查看文件位置。
 find 实际搜寻硬盘查询文件名称。
 which 是在 PATH 就是指定的路径中，搜索某个系统命令的位置，并返回第一个搜索结果。使用 which 命令，就可以看到某个系统命令是否存在，以及执行的到底是哪一个位置的命令

虚拟化和容器化有什么区别？
虚拟化
虚拟化帮助我们在单个物理服务器上运行和托管多个操作系统。在虚拟化中，管理程序为客户操作系统提供了一个虚拟机。VM 形成了硬件层的抽象，因此主机上的每个 VM 都可以充当物理机。
容器化
容器化为我们提供了一个独立的环境来运行我们的应用程序。我们可以在单个服务器或 VM 上使用相同的操作系统部署多个应用程序。容器构成了应用层的抽象，所以每个容器代表一个不同的应用。


docker create命令能够基于镜像创建容器。
该命令执行的效果类似于docker run -d，即创建一个将在系统后台运行的容器。
但是与docker run -d不同的是，docker create创建的容器并未实际启动，还需要执行docker start命令或docker run命令以启动容器。
事实上，docker create命令常用于在启动容器之前进行必要的设置。
docker commit -m "提交的描述信息" -a "作者" 容器ID 要创建的目标镜像名称:[标签名]提交容器使之成为一个新的镜像。
docker cp 容器ID:容器内的文件路径 宿主机路径从容器内拷贝文件到宿主机

磁盘=硬盘=disk，与内存不一样的是容量比较大。
磁盘管理：https://blog.csdn.net/weixin_53919192/article/details/126912534?spm=1001.2101.3001.6650.6&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-6-126912534-blog-125619062.235%5Ev38%5Epc_relevant_default_base&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-6-126912534-blog-125619062.235%5Ev38%5Epc_relevant_default_base&utm_relevant_index=6
https://blog.csdn.net/u010476739/article/details/127185906?spm=1001.2101.3001.6650.13&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-13-127185906-blog-125619062.235%5Ev38%5Epc_relevant_default_base&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-13-127185906-blog-125619062.235%5Ev38%5Epc_relevant_default_base&utm_relevant_index=15
部署nmp环境：https://blog.csdn.net/jinjuana521/article/details/123640188?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-5-123640188-blog-50650153.235^v38^pc_relevant_default_base&spm=1001.2101.3001.4242.4&utm_relevant_index=6
RAID+LVM:
https://blog.csdn.net/y805805/article/details/123920989?spm=1001.2101.3001.6650.10&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-10-123920989-blog-125644770.235%5Ev38%5Epc_relevant_default_base&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-10-123920989-blog-125644770.235%5Ev38%5Epc_relevant_default_base&utm_relevant_index=16


以下centos系统配置文件文件的作用:
/var/log/messages  #系统的日志信息文件
/var/log/secure    #记录服务器登陆行为的文件
/var/spool/cron/root  #root用户的定时任务文件
/usr/lib/systemd/system  # 系统服务的目录
/etc/fstab   # 开机自动挂载文件
/etc/rc.d/rc.local  # 开机自启文件，里面可以添加要自启动的shell指令


讲一下Keepalived的工作原理？
在一个虚拟路由器中，只有作为MASTER的VRRP路由器会一直发送VRRP通告信息,
BACKUP不会抢占MASTER，除非它的优先级更高。当MASTER不可用时(BACKUP收不到通告信息)
多台BACKUP中优先级最高的这台会被抢占为MASTER。这种抢占是非常快速的(<1s)，以保证服务的连续性
由于安全性考虑，VRRP包使用了加密协议进行加密。BACKUP不会发送通告信息，只会接收通告信息

HAproxy nginx lvs 负载均衡的区别：https://blog.csdn.net/CapejasmineY/article/details/104413652?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-104413652-blog-126806059.235^v38^pc_relevant_default_base&spm=1001.2101.3001.4242.1&utm_relevant_index=3
5555555555面试题：https://huaweicloud.csdn.net/63560507d3efff3090b58c34.html?spm=1001.2101.3001.6650.3&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Eactivity-3-124487812-blog-105204570.235%5Ev38%5Epc_relevant_default_base&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Eactivity-3-124487812-blog-105204570.235%5Ev38%5Epc_relevant_default_base&utm_relevant_index=4
6666666666面试题（服务配置相关）：https://www.cnblogs.com/yangzp/p/13052544.html
nginx负载均衡:https://blog.csdn.net/weixin_52799373/article/details/126036593
nginx动静分离：https://huaweicloud.csdn.net/63560f3cd3efff3090b593f2.html?spm=1001.2101.3001.6650.12&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Eactivity-12-123941866-blog-124209131.235%5Ev38%5Epc_relevant_default_base&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Eactivity-12-123941866-blog-124209131.235%5Ev38%5Epc_relevant_default_base&utm_relevant_index=17
lvs:https://blog.csdn.net/cristianoxm/article/details/120546371
LVS的英文全名为“Linux Virtual Server”，即Linux虚拟服务器，是一个虚拟的四层交换器集群系统。LVS工作在一台server上提供Directory(负载均衡器)的功能，本身并不提供服务，只是把特定的请求转发给对应的realserver(真正提供服务的主机)，目前是负载均衡性能最好的集群系统。
三种负载均衡的对比：https://zhuanlan.zhihu.com/p/71825940
DR模式下要求lvs与后端真实服务器在一个网段的原因：https://blog.z0ukun.com/?p=792
dr模式下 后端真实服务器的mac与ip不对应 却能继续向上层传输的原因：https://blog.csdn.net/qq_36885515/article/details/123137643
keepalived高可用原理：https://www.cnblogs.com/dazhidacheng/p/8028474.html

keepalive起初专门为lvs负载均衡软件设计的，用来管理监控lvs集群系统中各个服务节点的状态，后来又加入了可以实现高可用的vrrp功能。
keepalive软件通过vrrp协议实现高可用功能的。VRRP（虚拟路由器冗余协议）目的就是为了解决静态路由单点故障问题，竞选机制来将路由的任务交给某台VRRP路由器的，保证节点宕机，整个网络可以不间断的运行
Keepalived可以实现任意两台主机之间，例如Master和Backup主机之间的故障转移和自动切换，这个主机可以是普通的不能停机的业务服务器，也可以是LVS负载均衡、Nginx反向代理这样的服务器。

Keepalived高可用简单原理：
    master端的vrrp路由器会一直发送vrrp广播包，buckup会一直收到广播包，buckup不会抢占master资源，在backup上会一直监听，一旦收不到master的包，在多台backup中优先级最高的就会抢占为master

keepalive服务的三个重要功能：
　　1、  管理LVS负载均衡软件
　　2、  实现对LVS集群节点健康检查功能
　　3、  作为系统网络服务的高可用功能

何为keepalived脑裂：
    Keepalived的BACKUP主机在收到不MASTER主机报文后就会切换成为master，如果是它们之间的通信线路出现问题，无法接收到彼此的组播通知，但是两个节点实际都处于正常工作状态，这时两个节点均为master强行绑定虚拟IP，导致不可预料的后果，这就是脑裂。

挂载：
1.挂载的作用
Linux下，mount挂载的作用，就是将一个设备（通常是存储设备）挂接到一个已存在的目录上。访问这个目录就是访问该存储设备。linux操作系统将所有的设备都看作文件，它将整个计算机的资源都整合成一个大的文件目录。我们要访问存储设备中的文件，必须将文件所在的分区挂载到一个已存在的目录上，然后通过访问这个目录来访问存储设备。挂载就是把设备放在一个目录下，让系统知道怎么管理这个设备里的文件，了解这个存储设备的可读写特性之类的过程。
设备只有进行了mount挂载之后，才能在命令行使用命令来操作设备。
2.windows下，挂载就相当于给磁盘分区提供一个盘符，比如u盘插进电脑系统自动分配了一个盘，就相当于是挂载，拔出时相当于卸载unmount，

nfs共享文件原理及部署：https://blog.csdn.net/woaiyangmeng/article/details/127765328?spm=1001.2101.3001.6650.4&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-4-127765328-blog-120486278.235%5Ev38%5Epc_relevant_default_base&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-4-127765328-blog-120486278.235%5Ev38%5Epc_relevant_default_base&utm_relevant_index=7
https://blog.csdn.net/weixin_45067241/article/details/128204080?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-128204080-blog-127765328.235^v38^pc_relevant_default_base&spm=1001.2101.3001.4242.1&utm_relevant_index=1
https://huaweicloud.csdn.net/635610e0d3efff3090b59881.html?spm=1001.2101.3001.6650.9&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~activity-9-124287805-blog-120486278.235^v38^pc_relevant_default_base&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~activity-9-124287805-blog-120486278.235^v38^pc_relevant_default_base&utm_relevant_index=15
https://huaweicloud.csdn.net/635605cbd3efff3090b58cd6.html?spm=1001.2101.3001.6650.18&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Eactivity-18-124286904-blog-45668057.235%5Ev38%5Epc_relevant_default_base&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Eactivity-18-124286904-blog-45668057.235%5Ev38%5Epc_relevant_default_base&utm_relevant_index=25
带有端口设置版：https://blog.csdn.net/suo082407128/article/details/128616832?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-8-128616832-blog-120486278.235^v38^pc_relevant_default_base&spm=1001.2101.3001.4242.5&utm_relevant_index=9
nfs共享文件原理：https://blog.csdn.net/z609158391/article/details/105226176?spm=1001.2101.3001.6650.10&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-10-105226176-blog-120486278.235%5Ev38%5Epc_relevant_default_base&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-10-105226176-blog-120486278.235%5Ev38%5Epc_relevant_default_base&utm_relevant_index=16
lnmp搭建详细步骤：https://blog.csdn.net/tefuiryy/article/details/113134531?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-113134531-blog-120975642.235^v38^pc_relevant_default_base&spm=1001.2101.3001.4242.1&utm_relevant_index=1
https://huaweicloud.csdn.net/633561e5d3efff3090b54d9e.html?spm=1001.2101.3001.6650.15&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Eactivity-15-123653337-blog-51524785.235%5Ev38%5Epc_relevant_default_base&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Eactivity-15-123653337-blog-51524785.235%5Ev38%5Epc_relevant_default_base&utm_relevant_index=20
lnmp部署及搭建论坛:https://blog.csdn.net/qq_69278945/article/details/126486574
                   https://blog.csdn.net/weixin_69148277/article/details/130192055
在lnmp怎么搭建网站:https://blog.csdn.net/u010098331/article/details/51524785?spm=1001.2101.3001.6650.4&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-4-51524785-blog-99471381.235%5Ev38%5Epc_relevant_default_base&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-4-51524785-blog-99471381.235%5Ev38%5Epc_relevant_default_base&utm_relevant_index=5
[root@master ~]# cat /etc/redhat-release
CentOS Linux release 7.9.2009 (Core)

zabbix部署:https://writer.blog.csdn.net/article/details/129346563?spm=1001.2101.3001.6650.12&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-12-129346563-blog-122909816.235%5Ev38%5Epc_relevant_default_base&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-12-129346563-blog-122909816.235%5Ev38%5Epc_relevant_default_base

zabbix代理部署：https://writer.blog.csdn.net/article/details/129346563?spm=1001.2101.3001.6650.12&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-12-129346563-blog-122909816.235%5Ev38%5Epc_relevant_default_base&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-12-129346563-blog-122909816.235%5Ev38%5Epc_relevant_default_base


项目经验：https://blog.51cto.com/u_15067236/2607209?articleABtest=1
https://yingyongge.com/bKT38w4l1.html
https://www.cnblogs.com/chensiqiqi/p/9163089.html
https://search.gitee.com/?q=%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F&type=repository&lang=shell
项目：https://gitee.com/h5app/monitoring_centos/tree/master
https://gitee.com/mo-shan/gfdmp
https://gitee.com/mo-shan/analysis_binlog?_from=gitee_search
https://gitee.com/dbother/deploy_-my-sql?_from=gitee_search
毕业设计：
https://www.cnblogs.com/betterquan/tag/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/

简历模版：https://www.zhiyeapp.com/jlgl/Gq6D6p.html
https://gitee.com/iamruirui/watchurl?_from=gitee_search
https://gitee.com/h5app/monitoring_centos?_from=gitee_search
搭建高可用性的Web服务器
参考简历：https://www.jianliben.com/article/detail/1053

高可用MySQL关系型数据库
项目描述：通过部署Mysql-mmm软件实现MySQL读写分离、负载均衡和故障功能转移，从
而实现MySQL集群的高可用
keepalived+LVS实现web服务的负载均衡
➢项目职责：项目实施者
➢项目描述：1. 在2台调度器上安装keepalived软件，一台为主，一台为从，实现调度器的高
可
用和单点故障转移。


使用 Docker 创建 Mycat 和 MySQL 主从服务器：https://gitee.com/snitso/docker-mycat?_from=gitee_search
mysql多方式备份方法：https://gitee.com/lookingdreamer/MysqlBackup?_from=gitee_search
linux学习笔记：https://gitee.com/N-Ghost/study-notes?_from=gitee_search
网站或API服务状态监控（CURL定期检查）脚本：https://gitee.com/ddt009/curl_check_sh.git
数据库自动备份脚本部署教程 （MySQLAutoBack.sh)：https://gitee.com/no-one-knows/shell-script.git